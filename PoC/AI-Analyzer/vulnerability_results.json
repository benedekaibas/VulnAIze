[
  {
    "filename": "memory_free_correct.c",
    "raw_code": "#include <stdlib.h>\n\nint main() {\n    int* data = (int*)malloc(sizeof(int) * 5);\n    if (data != NULL) {\n        data[0] = 42;\n        free(data);\n    }\n    return 0;\n}\n",
    "tokens": [
      "#",
      "include",
      "<",
      "stdlib",
      ".",
      "h",
      ">",
      "int",
      "main",
      "(",
      ")",
      "{",
      "int",
      "*",
      "data",
      "=",
      "(",
      "int",
      "*",
      ")",
      "malloc",
      "(",
      "sizeof",
      "(",
      "int",
      ")",
      "*",
      "5",
      ")",
      ";",
      "if",
      "(",
      "data",
      "!",
      "=",
      "NULL",
      ")",
      "{",
      "data",
      "[",
      "0",
      "]",
      "=",
      "42",
      ";",
      "free",
      "(",
      "data",
      ")",
      ";",
      "}",
      "return",
      "0",
      ";",
      "}"
    ],
    "features": {
      "uses_strcpy": 0,
      "uses_strncpy": 0,
      "num_malloc": 1,
      "num_free": 1
    },
    "null_assignment_count": 0,
    "num_errors": 0,
    "errors": []
  },
  {
    "filename": "buffer_overflow.c",
    "raw_code": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char buffer[10];\n    strcpy(buffer, \"This is too long!\");\n    return 0;\n}\n",
    "tokens": [
      "#",
      "include",
      "<",
      "stdio",
      ".",
      "h",
      ">",
      "#",
      "include",
      "<",
      "string",
      ".",
      "h",
      ">",
      "int",
      "main",
      "(",
      ")",
      "{",
      "char",
      "buffer",
      "[",
      "10",
      "]",
      ";",
      "strcpy",
      "(",
      "buffer",
      ",",
      "\"",
      "This",
      "is",
      "too",
      "long",
      "!",
      "\"",
      ")",
      ";",
      "return",
      "0",
      ";",
      "}"
    ],
    "features": {
      "uses_strcpy": 1,
      "uses_strncpy": 0,
      "num_malloc": 0,
      "num_free": 0
    },
    "null_assignment_count": 0,
    "num_errors": 0,
    "errors": []
  },
  {
    "filename": "proper_buffer.c",
    "raw_code": "#include <stdio.h>\n#include <string.h>\n\nint main() {\n    char buffer[20];\n    strncpy(buffer, \"Hello\", sizeof(buffer) - 1);\n    buffer[sizeof(buffer) - 1] = '\\0';\n    printf(\"%s\\n\", buffer);\n    return 0;\n}\n",
    "tokens": [
      "#",
      "include",
      "<",
      "stdio",
      ".",
      "h",
      ">",
      "#",
      "include",
      "<",
      "string",
      ".",
      "h",
      ">",
      "int",
      "main",
      "(",
      ")",
      "{",
      "char",
      "buffer",
      "[",
      "20",
      "]",
      ";",
      "strncpy",
      "(",
      "buffer",
      ",",
      "\"",
      "Hello",
      "\"",
      ",",
      "sizeof",
      "(",
      "buffer",
      ")",
      "-",
      "1",
      ")",
      ";",
      "buffer",
      "[",
      "sizeof",
      "(",
      "buffer",
      ")",
      "-",
      "1",
      "]",
      "=",
      "'",
      "\\",
      "0",
      "'",
      ";",
      "printf",
      "(",
      "\"",
      "%",
      "s",
      "\\",
      "n",
      "\"",
      ",",
      "buffer",
      ")",
      ";",
      "return",
      "0",
      ";",
      "}"
    ],
    "features": {
      "uses_strcpy": 0,
      "uses_strncpy": 1,
      "num_malloc": 0,
      "num_free": 0
    },
    "null_assignment_count": 0,
    "num_errors": 0,
    "errors": []
  },
  {
    "filename": "null_point_deref.c",
    "raw_code": "#include <stdio.h>\n\nint main() {\n    int* ptr = NULL;\n    printf(\"%d\\n\", *ptr); // Dereferencing NULL\n    return 0;\n}\n",
    "tokens": [
      "#",
      "include",
      "<",
      "stdio",
      ".",
      "h",
      ">",
      "int",
      "main",
      "(",
      ")",
      "{",
      "int",
      "*",
      "ptr",
      "=",
      "NULL",
      ";",
      "printf",
      "(",
      "\"",
      "%",
      "d",
      "\\",
      "n",
      "\"",
      ",",
      "*",
      "ptr",
      ")",
      ";",
      "/",
      "/",
      "Dereferencing",
      "NULL",
      "return",
      "0",
      ";",
      "}"
    ],
    "features": {
      "uses_strcpy": 0,
      "uses_strncpy": 0,
      "num_malloc": 0,
      "num_free": 0
    },
    "null_assignment_count": 0,
    "num_errors": 0,
    "errors": []
  },
  {
    "filename": "use_after_free.c",
    "raw_code": "#include <stdlib.h>\n\nint main() {\n    int* data = (int*)malloc(sizeof(int) * 5);\n    free(data);\n    data[0] = 42; // Use after free happens here\n    return 0;\n}\n",
    "tokens": [
      "#",
      "include",
      "<",
      "stdlib",
      ".",
      "h",
      ">",
      "int",
      "main",
      "(",
      ")",
      "{",
      "int",
      "*",
      "data",
      "=",
      "(",
      "int",
      "*",
      ")",
      "malloc",
      "(",
      "sizeof",
      "(",
      "int",
      ")",
      "*",
      "5",
      ")",
      ";",
      "free",
      "(",
      "data",
      ")",
      ";",
      "data",
      "[",
      "0",
      "]",
      "=",
      "42",
      ";",
      "/",
      "/",
      "Use",
      "after",
      "free",
      "happens",
      "here",
      "return",
      "0",
      ";",
      "}"
    ],
    "features": {
      "uses_strcpy": 0,
      "uses_strncpy": 0,
      "num_malloc": 1,
      "num_free": 1
    },
    "null_assignment_count": 0,
    "num_errors": 0,
    "errors": []
  }
]